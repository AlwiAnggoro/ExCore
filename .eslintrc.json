{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "import"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript"
  ],
  "settings": {
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      },
      "node": {
        "extensions": [".ts", ".tsx"]
      }
    }
  },
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "import/no-cycle": "error",
    "import/order": ["error", {
      "groups": [
        "builtin",
        "external",
        "internal",
        "parent",
        "sibling",
        "index"
      ],
      "newlines-between": "always",
      "alphabetize": {
        "order": "asc",
        "caseInsensitive": true
      }
    }]
  },
  "overrides": [
    {
      "files": ["**/*.test.ts", "**/*.spec.ts"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off"
      }
    },
    {
      "files": ["packages/core/src/shared/domain/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", {
          "patterns": [
            {
              "group": ["**/infrastructure/**"],
              "message": "Domain layer cannot import from infrastructure. Domain must remain infrastructure-agnostic."
            },
            {
              "group": ["**/adapters/**"],
              "message": "Domain layer cannot import from adapters. Domain must remain framework-agnostic."
            },
            {
              "group": ["**/application/**"],
              "message": "Domain layer cannot import from application. Domain is the innermost layer."
            }
          ]
        }]
      }
    },
    {
      "files": ["packages/core/src/modules/*/domain/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", {
          "patterns": [
            {
              "group": ["**/infrastructure/**"],
              "message": "Domain layer cannot import from infrastructure. Domain must remain infrastructure-agnostic."
            },
            {
              "group": ["**/adapters/**"],
              "message": "Domain layer cannot import from adapters. Domain must remain framework-agnostic."
            },
            {
              "group": ["../application/**"],
              "message": "Domain layer cannot import from application. Domain is the innermost layer."
            }
          ]
        }]
      }
    },
    {
      "files": ["packages/core/src/modules/*/application/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", {
          "patterns": [
            {
              "group": ["**/adapters/**"],
              "message": "Application layer cannot import from adapters. Application must remain framework-agnostic."
            },
            {
              "group": ["**/infrastructure/*/implementation", "**/infrastructure/*/*Impl.ts"],
              "message": "Application layer should depend on infrastructure interfaces, not concrete implementations."
            }
          ]
        }]
      }
    },
    {
      "files": ["packages/core/src/shared/infrastructure/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", {
          "patterns": [
            {
              "group": ["**/domain/**"],
              "message": "Infrastructure should not import domain entities directly. Use interfaces and dependency injection."
            }
          ]
        }]
      }
    },
    {
      "files": ["packages/core/src/adapters/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", {
          "patterns": [
            {
              "group": ["**/domain/*", "!**/domain/events/**"],
              "message": "Adapters should not import domain entities directly. Use application layer interfaces."
            }
          ]
        }]
      }
    }
  ]
}
